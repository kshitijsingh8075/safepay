# Simplified QR Payment Flow Implementation

Here's the clean implementation for your SafePay website that:
1. User scans QR code
2. Website validates the QR
3. If valid, shows payment options
4. Redirects to GPay with pre-filled details when clicked
5. User just enters PIN to complete payment

## HTML Additions

```html
<!-- Add to your existing payment page -->
<div class="qr-section">
  <button id="scan-btn" class="btn btn-primary">
    <i class="fas fa-qrcode"></i> Scan QR Code
  </button>
  
  <div id="scanner-container" style="display:none;">
    <div id="scanner"></div>
    <button id="cancel-scan" class="btn btn-secondary">Cancel</button>
  </div>
  
  <div id="payment-options" class="payment-options" style="display:none;">
    <h4>Pay using:</h4>
    <button id="gpay-btn" class="payment-btn gpay">
      <img src="gpay-logo.png" alt=""> Google Pay
    </button>
  </div>
</div>
```

## JavaScript Implementation

```javascript
// QR Scanner Functionality
const scanBtn = document.getElementById('scan-btn');
const scannerContainer = document.getElementById('scanner-container');
const paymentOptions = document.getElementById('payment-options');

scanBtn.addEventListener('click', initScanner);

function initScanner() {
  scannerContainer.style.display = 'block';
  scanBtn.style.display = 'none';
  
  let scanner = new Instascan.Scanner({ 
    video: document.getElementById('scanner'),
    mirror: false
  });

  Instascan.Camera.getCameras()
    .then(cameras => {
      if (cameras.length > 0) {
        scanner.start(cameras[0]);
      } else {
        alert('Camera access denied or no cameras found');
        resetScanner();
      }
    })
    .catch(err => {
      console.error('Camera error:', err);
      resetScanner();
    });

  scanner.addListener('scan', content => {
    if (validateUPIQr(content)) {
      processValidQR(content);
      scanner.stop();
    } else {
      alert('Invalid payment QR code. Please try again.');
    }
  });

  document.getElementById('cancel-scan').addEventListener('click', () => {
    scanner.stop();
    resetScanner();
  });
}

function validateUPIQr(content) {
  // Basic UPI QR validation
  return content.startsWith('upi://pay?') || 
         content.startsWith('https://upi://pay?');
}

function processValidQR(content) {
  const params = new URLSearchParams(content.split('?')[1]);
  
  // Store payment details
  window.paymentData = {
    upiId: params.get('pa'),
    name: params.get('pn') || 'Merchant',
    amount: params.get('am') || ''
  };
  
  // Show payment options
  scannerContainer.style.display = 'none';
  paymentOptions.style.display = 'block';
}

function resetScanner() {
  scannerContainer.style.display = 'none';
  scanBtn.style.display = 'block';
  paymentOptions.style.display = 'none';
}

// GPay Payment Handler
document.getElementById('gpay-btn').addEventListener('click', () => {
  const amount = document.getElementById('amount-input').value;
  
  if (!amount || isNaN(amount)) {
    alert('Please enter a valid amount');
    return;
  }

  const { upiId, name } = window.paymentData;
  const note = 'Payment via SafePay';
  
  // UPI Deep Link (works across apps)
  const upiLink = `upi://pay?pa=${upiId}&pn=${encodeURIComponent(name)}&am=${amount}&tn=${note}&cu=INR`;
  
  // Try to open directly
  window.location.href = upiLink;
  
  // Fallback after delay
  setTimeout(() => {
    window.location.href = `https://gpay.app.goo.gl/your-gpay-link?pa=${upiId}&pn=${encodeURIComponent(name)}&am=${amount}`;
  }, 500);
});
```

## CSS Styling

```css
/* QR Scanner Styles */
.qr-section {
  text-align: center;
  margin: 20px 0;
}

#scanner-container {
  position: relative;
  margin: 0 auto;
  max-width: 400px;
  background: #000;
  padding: 10px;
  border-radius: 8px;
}

#scanner {
  width: 100%;
  height: auto;
}

#cancel-scan {
  margin-top: 10px;
  width: 100%;
}

/* Payment Options */
.payment-options {
  margin-top: 20px;
  padding: 15px;
  background: #f8f9fa;
  border-radius: 8px;
}

.payment-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  width: 100%;
  padding: 12px;
  margin: 8px 0;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
}

.payment-btn.gpay {
  background: #4285F4;
  color: white;
}

.payment-btn img {
  height: 24px;
  width: auto;
}
```

## Key Features:

1. **Simplified Flow**:
   - Scan → Validate → Show Options → Redirect
   - No unnecessary steps

2. **QR Validation**:
   - Checks for standard UPI QR format
   - Basic validation before proceeding

3. **GPay Redirection**:
   - Direct deep link to GPay app
   - Pre-fills all payment details
   - User only needs to enter PIN

4. **Error Handling**:
   - Camera access errors
   - Invalid QR codes
   - Missing amount input

5. **Clean UI**:
   - Matches your existing site style
   - Responsive design
   - Clear user flow

To implement:
1. Add the Instascan library
2. Add the HTML to your payment page
3. Include the JavaScript
4. Add the CSS styles
5. Replace `your-gpay-link` with your actual GPay business link